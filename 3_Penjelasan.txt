| No. | Konsep Inheritance                              | Penjelasan Teori                                                                     | Contoh di Kode JavaScript                                                                                                  |
| --- | ----------------------------------------------- | ------------------------------------------------------------------------------------ | -------------------------------------------------------------------------------------------------------------------------- |
| 1   | Pewarisan (Inheritance)                         | Subclass mewarisi properti dan method dari superclass, tanpa perlu menulis ulang.    | `NormalOrder` dan `SpecialOrder` mewarisi dari `Order`.                                                                    |
| 2   | Superclass: Order                               | Kelas induk yang mendefinisikan atribut dan method umum untuk semua jenis pesanan.   | `function Order(date, number)` dengan method `confirm()` dan `close()`.                                                    |
| 3   | Subclass: SpecialOrder & NormalOrder            | Kelas anak yang memperluas Order, bisa menambahkan atau menimpa method-nya sendiri.  | `function SpecialOrder(...)`, `function NormalOrder(...)` dengan method `dispatch()` dan `receive()` (khusus NormalOrder). |
| 4   | Constructor Inheritance                         | Subclass harus memanggil constructor superclass agar bisa mengakses properti `this`. | `Order.call(this, date, number)` di dalam `SpecialOrder` dan `NormalOrder`.                                                |
| 5   | Prototype Inheritance                           | Pewarisan method dilakukan melalui prototype chain (bukan salinan langsung).         | `SpecialOrder.prototype = Object.create(Order.prototype)`.                                                                 |
| 6   | Reset constructor subclass                      | Agar tidak kehilangan referensi asli constructor setelah pewarisan prototype.        | `SpecialOrder.prototype.constructor = SpecialOrder`.                                                                       |
| 7   | Pemanggilan Method Turunan                      | Method yang tidak ada di subclass akan dicari ke atas di chain superclass.           | `normalOrder.close()` → dicari di `Order.prototype` lalu dijalankan.                                                       |
| 8   | Pemanggilan Method Sendiri (Override)           | Subclass bisa memiliki method sendiri di luar yang diwarisi.                         | `NormalOrder.receive()` → tidak dimiliki Order, hanya ada di NormalOrder.                                                  |
| 9   | Relasi Customer dan Order (bukan pewarisan)     | `Customer` adalah entitas pengguna, tidak mewarisi dari `Order`, tapi memprosesnya.  | `Customer.prototype.sendOrder(order)` menerima objek Order untuk diproses.                                                 |
| 10  | Pemrosesan Order sesuai Alur                    | Alur dijalankan sesuai pseudocode: send → confirm → dispatch → (receive) → close.    | Di akhir kode: `normalOrder.confirm()`, `normalOrder.dispatch()`, dst.                                                     |
| 11  | Polimorfisme Sederhana (duck typing)            | Tanpa pakai `instanceof`, cukup cek apakah method tertentu ada.                      | `if (typeof order.receive === 'function')` digunakan sebagai pengganti `instanceof`.                                       |
